require('dotenv').config();
const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const cors = require('cors');

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
    cors: {
        origin: "*",
        methods: ["GET", "POST"],
        credentials: true
    }
});

let activeUsers = {};

io.on("connection", (socket) => {
    console.log("ğŸŸ¢ Yeni kullanÄ±cÄ± baÄŸlandÄ±:", socket.id);

    // ğŸ“Œ KullanÄ±cÄ± Gruba KatÄ±lÄ±yor
    socket.on("joinGroup", ({ userId, groupId }) => {
        socket.join(groupId);
        activeUsers[userId] = { socketId: socket.id, groupId };
        console.log(`âœ… KullanÄ±cÄ± ${userId}, ${groupId} grubuna katÄ±ldÄ±`);
    });

    // ğŸ“Œ Tek bir `sendMessage` fonksiyonu ile hem metin hem de resimli mesajlar iÅŸleniyor
    socket.on("sendMessage", ({ groupId, message, senderId, senderName, senderProfileImageUrl, imageUrl }) => {
        const timestamp = new Date().toISOString();

        console.log(`ğŸ“© Yeni Mesaj AlÄ±ndÄ± -> Grup: ${groupId}, GÃ¶nderen: ${senderId}, Mesaj: ${message}, Resim: ${imageUrl}`);

        const messageData = {
            message: message || "",  // **ğŸ”¥ EÄŸer mesaj boÅŸsa "", null olmamasÄ± iÃ§in**
            senderId,
            senderName,
            senderProfileImageUrl,
            groupId,
            imageUrl: imageUrl || null,  // **ğŸ”¥ EÄŸer resim yoksa null bÄ±rak**
            timestamp
        };

        io.to(groupId).emit("receiveMessage", messageData); // **ğŸ”¥ Tek event ile hem metin hem de resimli mesajlar gÃ¶nderilecek**

        console.log(`âœ… Mesaj yayÄ±nlandÄ±: ${JSON.stringify(messageData)} -> Grup ${groupId}`);
    });

    // ğŸ“Œ KullanÄ±cÄ± BaÄŸlantÄ±yÄ± KestiÄŸinde
    socket.on("disconnect", () => {
        Object.keys(activeUsers).forEach(userId => {
            if (activeUsers[userId].socketId === socket.id) {
                delete activeUsers[userId];
            }
        });
        console.log("ğŸ”´ KullanÄ±cÄ± baÄŸlantÄ±yÄ± kesti:", socket.id);
    });
});

// ğŸ“Œ Server BaÅŸlatÄ±lÄ±yor
const PORT = process.env.PORT || 5000;
server.listen(PORT, () =>
    console.log(`ğŸš€ Server Ã§alÄ±ÅŸÄ±yor: Port ${PORT}`)
);
